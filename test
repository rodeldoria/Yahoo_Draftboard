from flask import Flask, jsonify, request, render_template
from yahoo_oauth import OAuth2
from yahoo_fantasy_api import Game, League
import json
import logging
import asyncio
import aiohttp
from asgiref.sync import async_to_sync

app = Flask(__name__)

# Initialize OAuth2
oauth = OAuth2(None, None, from_file='oauth2.json')

# Check if the token is valid, refresh if necessary
if not oauth.token_is_valid():
    oauth.refresh_access_token()

# Set up logging
logging.basicConfig(level=logging.INFO)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/drafts/<league_key>', methods=['GET'])
def get_draft_results_by_key(league_key):
    """Get draft results by league key."""
    try:
        nfl_game = Game(oauth, 'nfl')
        league = nfl_game.to_league(league_key)
        draft_results = league.draft_results()
        if not draft_results:
            return jsonify({"message": "No draft results available."}), 404
        return jsonify(draft_results)
    except Exception as e:
        logging.error(f"Exception: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/standings', methods=['GET'])
def get_standings():
    """Get league standings."""
    try:
        league_id = request.args.get('league_id')
        nfl_game = Game(oauth, 'nfl')
        league = nfl_game.to_league(league_id)
        standings = league.standings()
        return jsonify(standings)
    except Exception as e:
        logging.error(f"Exception: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/teams', methods=['GET'])
def get_all_teams():
    """Get all teams."""
    try:
        league_id = request.args.get('league_id')
        nfl_game = Game(oauth, 'nfl')
        league = nfl_game.to_league(league_id)
        teams = league.teams()
        return jsonify(teams)
    except Exception as e:
        logging.error(f"Exception: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/player-details', methods=['GET'])
def get_player_details():
    """Get player details."""
    try:
        league_id = request.args.get('league_id')
        player_identifier = request.args.get('player')  # Either player ID or search term

        nfl_game = Game(oauth, 'nfl')
        league = nfl_game.to_league(league_id)

        if player_identifier.isdigit():
            # If the player identifier is a digit, assume it's a player ID
            player_details = league.player_details(player_identifier)
        else:
            # Otherwise, search by name
            player_details = league.player_details(player_identifier)

        # Format response to match your desired structure
        formatted_details = []
        for player in player_details:
            formatted_details.append({
                "player_key": player["player_key"],
                "player_id": player["player_id"],
                "name": player["name"],
                "editorial_player_key": player["editorial_player_key"],
                "editorial_team_key": player["editorial_team_key"],
                "editorial_team_full_name": player["editorial_team_full_name"],
                "editorial_team_abbr": player["editorial_team_abbr"],
                "bye_weeks": player.get("bye_weeks", {}),
                "uniform_number": player.get("uniform_number", ""),
                "display_position": player.get("display_position", ""),
                "headshot": player.get("headshot", {}),
                "image_url": player.get("image_url", ""),
                "is_undroppable": player.get("is_undroppable", ""),
                "position_type": player.get("position_type", ""),
                "primary_position": player.get("primary_position", ""),
                "eligible_positions": player.get("eligible_positions", []),
                "player_stats": player.get("player_stats", {}),
                "player_points": player.get("player_points", {})
            })

        ownership = league.ownership([player['player_id'] for player in player_details])
        response = {
            "details": formatted_details,
            "ownership": ownership
        }

        return jsonify(response)
    except Exception as e:
        logging.error(f"Exception: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/free-agents', methods=['GET'])
def get_free_agents():
    """Get free agents for a given position."""
    try:
        league_id = request.args.get('league_id')
        position = request.args.get('position')

        nfl_game = Game(oauth, 'nfl')
        league = nfl_game.to_league(league_id)
        free_agents = league.free_agents(position)

        return jsonify(free_agents)
    except Exception as e:
        logging.error(f"Exception: {str(e)}")
        return jsonify({'error': str(e)}), 500

async def fetch_player_stats(session, player_ids):
    """Fetch player stats asynchronously."""
    stats = []
    for player_id in player_ids:
        url = f"https://fantasysports.yahooapis.com/fantasy/v2/league/nfl.l.818153/players;player_keys=nfl.p.{player_id}/stats?format=json"
        async with session.get(url, headers={'Authorization': f'Bearer {oauth.token["access_token"]}'}) as response:
            data = await response.json()
            stats.append(data)
    return stats

@app.route('/get_draft_results', methods=['POST'])
async def fetch_draft_results():
    """Fetch draft results and player stats asynchronously."""
    try:
        draft_results = request.json.get('draft_results', [])
        player_ids = [result['player_id'] for result in draft_results]

        async with aiohttp.ClientSession() as session:
            player_stats = await fetch_player_stats(session, player_ids)

        draft_info_list = []
        for result, stats in zip(draft_results, player_stats):
            player_info = league.player_details(result['player_id'])[0]
            draft_info = {
                'pick': result['pick'],
                'round': result['round'],
                'team_key': result['team_key'],
                'player_id': result['player_id'],
                'player_name': player_info['name']['full'],
                'position': player_info['primary_position'],
                'stats': stats
            }
            draft_info_list.append(draft_info)

        return jsonify({'draft_results': draft_info_list})
    except aiohttp.ClientError as e:
        logging.error(f"Network error: {str(e)}")
        return jsonify({'error': 'Network error. Please try again later.'}), 500
    except RuntimeError as e:
        error_message = str(e)
        logging.error(f"Runtime error: {error_message}")
        if "Player key" in error_message and "does not exist" in error_message:
            return jsonify({'error': 'One or more player keys do not exist. Please check the player IDs and try again.'})
        return jsonify({'error': error_message})
    except Exception as e:
        logging.error(f"Exception: {str(e)}")
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(debug=True)


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yahoo Fantasy Sports Draft Board</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .banner {
            background-color: #4CAF50;
            color: white;
            padding: 10px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
        }

        .intro {
            margin: 20px;
            font-size: 16px;
        }

        .compact-input,
        .compact-button {
            margin: 10px 0;
        }

        .compact-input {
            padding: 5px;
            font-size: 14px;
            border: 1px solid #444;
            border-radius: 5px;
            background-color: #333;
            color: #fff;
        }

        .compact-button {
            padding: 5px 10px;
            font-size: 14px;
            border: 1px solid #444;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
        }

        .compact-button:hover {
            background-color: #555;
        }

        .round-container,
        .teams-container,
        .player-details-container {
            margin-bottom: 20px;
        }

        .round-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .player-cards {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .player-card {
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 5px;
            background-color: #fff;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            font-size: 10px;
            height: 100px;
            width: 120px;
        }

        .player-card img {
            max-width: 100%;
            border-radius: 5px;
            height: 40px;
        }

        .player-info {
            margin-top: 5px;
        }

        .dark-theme {
            background-color: #333;
            color: #fff;
        }

        .light-theme {
            background-color: #fff;
            color: #000;
        }
    </style>
</head>

<body class="light-theme">
    <div class="banner">Yahoo Fantasy Sports Draft Board</div>
    <div class="intro">
        Welcome to the Yahoo Fantasy Sports Draft Board! This tool helps you manage your fantasy football draft picks and view team standings efficiently.
        <ul>
            <li><strong>Fetch Draft Data:</strong> Enter your Yahoo league ID and click "Fetch Draft Data" to get real-time updates on draft picks.</li>
            <li><strong>Fetch Standings:</strong> View the current standings of teams within your league.</li>
            <li><strong>Fetch Teams:</strong> Display team information and rosters.</li>
            <li><strong>Fetch Player Details:</strong> Retrieve detailed information about players, including stats and ownership.</li>
            <li><strong>View Free Agents:</strong> Fetch a list of available free agents based on the position selected.</li>
        </ul>
    </div>

    <div class="form-inline">
        <input type="text" id="leagueId" class="compact-input" placeholder="Enter League ID (e.g., nfl.l.818153)">
        <button id="fetchDraftResults" class="compact-button">Fetch Draft Results</button>
        <button id="fetchStandings" class="compact-button">Fetch Standings</button>
        <button id="fetchTeams" class="compact-button">Fetch Teams</button>
        <button id="fetchPlayerDetails" class="compact-button">Fetch Player Details</button>
        <button id="fetchFreeAgents" class="compact-button">Fetch Free Agents</button>
    </div>

    <div id="draftBoard" class="round-container"></div>
    <div id="standings" class="teams-container"></div>
    <div id="teams" class="teams-container"></div>
    <div id="playerDetails" class="player-details-container"></div>
    <div id="freeAgents" class="player-details-container"></div>

    <script>
        function fetchDraftResults() {
            const leagueId = document.getElementById('leagueId').value;
            if (!leagueId) {
                alert("Please enter a League ID."); // Alert if no League ID is provided
                return;
            }
            fetch('/api/drafts/' + leagueId)
                .then(response => response.json())
                .then(data => {
                    const draftBoard = document.getElementById('draftBoard');
                    draftBoard.innerHTML = ''; // Clear previous results

                    const rounds = {};

                    data.forEach(result => {
                        const round = result.round;
                        if (!rounds[round]) {
                            rounds[round] = [];
                        }
                        rounds[round].push(result);
                    });

                    for (const round in rounds) {
                        const roundContainer = document.createElement('div');
                        roundContainer.className = 'round-container';

                        const roundTitle = document.createElement('div');
                        roundTitle.className = 'round-title';
                        roundTitle.innerText = `Round ${round}`;
                        roundContainer.appendChild(roundTitle);

                        const playerCards = document.createElement('div');
                        playerCards.className = 'player-cards';

                        rounds[round].forEach(player => {
                            const playerCard = document.createElement('div');
                            playerCard.className = 'player-card';
                            playerCard.innerHTML = `
                                <div class="player-info">
                                    <h2>${name} (${player.position})</h2>
                                    <p>Pick: ${player.pick}, Round: ${player.round}</p>
                                    <p>Team: ${player.team_key}</p>
                                    <p>${player.positiontype.team_key}

                                     "player_key": player["player_key"],
                "player_id": player["player_id"],
                "name": player["name"],
                "editorial_player_key": player["editorial_player_key"],
                "editorial_team_key": player["editorial_team_key"],
                "editorial_team_full_name": player["editorial_team_full_name"],
                "editorial_team_abbr": player["editorial_team_abbr"],
                "bye_weeks": player.get("bye_weeks", {}),
                "uniform_number": player.get("uniform_number", ""),
                "display_position": player.get("display_position", ""),
                "headshot": player.get("headshot", {}),
                "image_url": player.get("image_url", ""),
                "is_undroppable": player.get("is_undroppable", ""),
                "position_type": player.get("position_type", ""),
                "primary_position": player.get("primary_position", ""),
                "eligible_positions": player.get("eligible_positions", []),
                "player_stats": player.get("player_stats", {}),
                "player_points": player.get("player_points", {})
                                </div>
                            `;
                            playerCards.appendChild(playerCard);
                        });

                        roundContainer.appendChild(playerCards);
                        draftBoard.appendChild(roundContainer);
                    }
                })
                .catch(error => console.error('Error fetching draft results:', error));
        }

        function fetchStandings() {
            const leagueId = document.getElementById('leagueId').value;
            if (!leagueId) {
                alert("Please enter a League ID."); // Alert if no League ID is provided
                return;
            }
            fetch(`/api/standings?league_id=${leagueId}`)
                .then(response => response.json())
                .then(data => {
                    const standingsDiv = document.getElementById('standings');
                    standingsDiv.innerHTML = ''; // Clear previous results

                    data.forEach(team => {
                        const teamCard = document.createElement('div');
                        teamCard.innerHTML = `
                            <div>Team Name: ${team.name}</div>
                            <div>Rank: ${team.rank}</div>
                            <div>Points: ${team.points}</div>
                        `;
                        standingsDiv.appendChild(teamCard);
                    });
                })
                .catch(error => {
                    console.error('Error fetching standings:', error);
                    alert('Error fetching standings: ' + error.message);
                });
        }

        function fetchTeams() {
            const leagueId = document.getElementById('leagueId').value;
            if (!leagueId) {
                alert("Please enter a League ID."); // Alert if no League ID is provided
                return;
            }
            fetch(`/api/teams?league_id=${leagueId}`)
                .then(response => response.json())
                .then(data => {
                    const teamsDiv = document.getElementById('teams');
                    teamsDiv.innerHTML = ''; // Clear previous results

                    data.forEach(team => {
                        const teamCard = document.createElement('div');
                        teamCard.innerHTML = `
                            <div>Team Name: ${team.name}</div>
                            <div>Manager: ${team.manager}</div>
                        `;
                        teamsDiv.appendChild(teamCard);
                    });
                })
                .catch(error => {
                    console.error('Error fetching teams:', error);
                    alert('Error fetching teams: ' + error.message);
                });
        }

        function fetchPlayerDetails() {
            const leagueId = document.getElementById('leagueId').value;
            const playerId = prompt("Enter Player ID or Name to Search:"); // Prompt user to enter player ID or name
            if (!leagueId || !playerId) {
                alert("Please enter both League ID and Player ID/Name."); // Alert if inputs are missing
                return;
            }

            fetch(`/api/player-details?league_id=${leagueId}&player=${playerId}`)
                .then(response => response.json())
                .then(data => {
                    const playerDetailsDiv = document.getElementById('playerDetails');
                    playerDetailsDiv.innerHTML = ''; // Clear previous results

                    if (data.details && data.details.length > 0) {
                        data.details.forEach(player => {
                            const playerInfo = `
                                <div>
                                    <h2>${player.name.full} (${player.display_position})</h2>
                                    <img src="${player.image_url}" alt="${player.name.full}">
                                    <p>Team: ${player.editorial_team_full_name}</p>
                                    <p>Bye Week: ${player.bye_weeks.week}</p>
                                    <p>Uniform Number: ${player.uniform_number}</p>
                                    <p>Is Undroppable: ${player.is_undroppable}</p>
                                    <p>Position Type: ${player.position_type}</p>
                                    <p>Primary Position: ${player.primary_position}</p>
                                    <h3>Stats:</h3>
                                    <ul>
                                        ${player.player_stats.stats.map(stat => `<li>Stat ID: ${stat.stat.stat_id}, Value: ${stat.stat.value}</li>`).join('')}
                                    </ul>
                                    <h3>Points:</h3>
                                    <p>Total Points: ${player.player_points.total}</p>
                                    <h3>Ownership:</h3>
                                    <p>Owner Team Name: ${data.ownership[player.player_id]?.owner_team_name || 'N/A'}</p>
                                </div>
                            `;
                            playerDetailsDiv.innerHTML += playerInfo;
                        });
                    } else {
                        playerDetailsDiv.innerHTML = '<p>No player details found.</p>';
                    }
                })
                .catch(error => {
                    console.error('Error fetching player details:', error);
                    alert('Error fetching player details: ' + error.message);
                });
        }

        function fetchFreeAgents() {
            const leagueId = document.getElementById('leagueId').value;
            const position = prompt("Enter Position to Search Free Agents (e.g., QB, WR, RB):"); // Prompt for position
            if (!leagueId || !position) {
                alert("Please enter both League ID and Position."); // Alert if inputs are missing
                return;
            }

            fetch(`/api/free-agents?league_id=${leagueId}&position=${position}`)
                .then(response => response.json())
                .then(data => {
                    const freeAgentsDiv = document.getElementById('freeAgents');
                    freeAgentsDiv.innerHTML = ''; // Clear previous results

                    data.forEach(agent => {
                        const agentCard = document.createElement('div');
                        agentCard.className = 'player-card';
                        agentCard.innerHTML = `
                            <img src="${agent.image_url}" alt="${agent.name.full}">
                            <div class="player-info">
                                <h2>${agent.name.full} (${agent.display_position})</h2>
                                <p>Team: ${agent.editorial_team_full_name}</p>
                                <p>Position: ${agent.primary_position}</p>
                                <p>Ownership: ${agent.percent_owned}%</p>
                            </div>
                        `;
                        freeAgentsDiv.appendChild(agentCard);
                    });
                })
                .catch(error => {
                    console.error('Error fetching free agents:', error);
                    alert('Error fetching free agents: ' + error.message);
                });
        }

        document.getElementById('fetchDraftResults').addEventListener('click', fetchDraftResults);
        document.getElementById('fetchStandings').addEventListener('click', fetchStandings);
        document.getElementById('fetchTeams').addEventListener('click', fetchTeams);
        document.getElementById('fetchPlayerDetails').addEventListener('click', fetchPlayerDetails);
        document.getElementById('fetchFreeAgents').addEventListener('click', fetchFreeAgents);
    </script>
</body>

</html>
